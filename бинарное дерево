#include <iostream>
#include <fstream> 
#include <vector>
#include <ctime>
#include <cstdlib>

using namespace std;

// Структура узла дерева
struct Node {
    int value;
    Node* left;
    Node* right;

    Node(int value) : value(value), left(nullptr), right(nullptr) {}
};

// Функция вставки элемента в дерево
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }

    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

// Функция печати дерева в файл
void print_tree_to_file(Node* root, int level, ofstream& outputFile) {
    if (root == nullptr) {
        return;
    }

    const int SPACES_PER_LEVEL = 4;
    for (int i = 0; i < level * SPACES_PER_LEVEL; i++) {
        outputFile << " ";
    }

    outputFile << root->value << endl;

    print_tree_to_file(root->left, level + 1, outputFile);
    print_tree_to_file(root->right, level + 1, outputFile);
}


int main() {
    int n;
    cout << "Введите количество чисел: ";
    cin >> n;

    int method;
    cout << "Введите метод ввода чисел (1 - ручной ввод, 2 - случайная генерация): ";
    cin >> method;

    vector<int> numbers;
    if (method == 1) {
        cout << "Введите " << n << " чисел: ";
        for (int i = 0; i < n; i++) {
            int number;
            cin >> number;
            numbers.push_back(number);
        }
    } else if (method == 2) {
        srand(time(nullptr));
        for (int i = 0; i < n; i++) {
            int number = rand() % n + 1;
            numbers.push_back(number);
        }
    } else {
        cout << "Неверный метод ввода." << endl;
        return 1;
    }

    Node* root = nullptr;
    for (int i = 0; i < numbers.size(); i++) {
        root = insert(root, numbers[i]);
    }

    // Определяем имя файла для вывода дерева
    string filename = "derevo.txt";

    // Открываем файл для записи
    ofstream outputFile(filename);
    if (!outputFile.is_open()) {
        cout << "Ошибка открытия файла." << endl;
        return 1;
    }

    // Печатаем построенное дерево в файл
    outputFile << "Построенное бинарное дерево:" << endl;
    print_tree_to_file(root, 0, outputFile);

    // Закрываем файл
    outputFile.close();

    cout << "Дерево успешно записано в файл " << filename << endl;

    return 0;
}

