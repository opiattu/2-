#include <clocale>
#include <iostream>
#include <vector>
#include <limits>

using namespace std;
//partition и quickSort реализация быстрой сортировки
int partition(vector<long long int>& vec, int low, int high) { //функция partition выбирает опорный элемент pivot, затем перемещает все элементы меньше pivot влево от него и все элементы больше pivot вправо от него.
    long long int pivot = vec[high];
    int i = low - 1;
    for (int j = low; j <= high - 1; j++) {
        if (vec[j] < pivot) {
            i++;
            swap(vec[i], vec[j]);
        }
    }
    swap(vec[i + 1], vec[high]);
    return i + 1;
}

void quickSort(vector<long long int>& vec, int low, int high) { //quickSort рекурсивно вызывается для двух подмассивов, слева и справа от опорного элемента, чтобы выполнить сортировку на месте
    if (low < high) {
        int pivot = partition(vec, low, high);
        quickSort(vec, low, pivot - 1);
        quickSort(vec, pivot + 1, high);
    }
}

int main() {
    setlocale(LC_ALL, "Russian");

    int n;
    cout << "Введите кол-во элементов последовательности: ";
    cin >> n;

    vector<long long int> vec; 
    long long int a; 
    for (int i = 0; i < n; i++) {
        cout << i + 1 << ". ";
        while (!(cin >> a)) {
            cout << "Некорректный ввод! Введите число: ";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        vec.push_back(a);
    }

    cout << "Вот как выглядит последовательность до сортировки:\n";
    for (int i = 0; i < n; i++) {
        cout << vec[i] << " ";
    }
    
    quickSort(vec, 0, n - 1);

    cout << "\nВот как выглядит последовательность после сортировки:\n";
    for (int i = 0; i < n; i++) {
        cout << vec[i] << " ";
    }
    
    return 0;
}
