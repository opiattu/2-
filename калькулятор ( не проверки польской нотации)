#include <iostream>
#include <string>
#include <cmath>
#include <stack>
#include <sstream>

using namespace std;

int precedence(char op) { // приоритет операторов
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

bool isValidNumber(const string& number, int base) { // проверка система счисления
    string validChars = "0123456789ABCDEF";
    for (char digit : number) {
        if (validChars.find(digit) == string::npos || digit >= validChars[base]) {
            return false;
        }
    }
    return true;
}

int convertToDecimal(const string& number, int base) {
    int decimal = 0;
    for (char digit : number) {
        int value = isdigit(digit) ? digit - '0' : toupper(digit) - 'A' + 10; // isdigit -  , toupper -
        decimal = decimal * base + value;
    }
    return decimal;
}

string convertFromDecimal(int decimal, int base) {
    string result = "";
    while (decimal > 0) {
        int remainder = decimal % base;
        char digit = (remainder < 10) ? ('0' + remainder) : ('A' + remainder - 10);
        result = digit + result;
        decimal /= base;
    }
    return result;
}

int applyOperation(int result, int number, char operation) {
    if (operation == '+') {
        return result + number;
    } else if (operation == '-') {
        return result - number;
    } else if (operation == '*') {
        return result * number;
    } else if (operation == '/') {
        return result / number;
    }
    return 0;
}

int evaluateExpression(const string& expression, int base) {
    stringstream ss(expression);
    string token;
    int result = 0;
    char operation = '+';

    stack<char> operators;
    stack<int> operands;

    while (ss >> token) {
        if (isdigit(token[0])) {
            int number = convertToDecimal(token, base);
            operands.push(number);
        } else if (token == "(") {
            operators.push('(');
        } else if (token == ")") {
            while (!operators.empty() && operators.top() != '(') {
                char op = operators.top();
                operators.pop();
                int operand2 = operands.top();
                operands.pop();
                int operand1 = operands.top();
                operands.pop();
                operands.push(applyOperation(operand1, operand2, op));
            }
            operators.pop(); // Discard the '('
        } else if (token == "+" || token == "-" || token == "*" || token == "/") {
            while (!operators.empty() && operators.top() != '(' && precedence(operators.top()) >= precedence(token[0])) {
                char op = operators.top();
                operators.pop();
                int operand2 = operands.top();
                operands.pop();
                int operand1 = operands.top();
                operands.pop();
                operands.push(applyOperation(operand1, operand2, op));
            }
            operators.push(token[0]);
        }
    }

    while (!operators.empty()) {
        char op = operators.top();
        operators.pop();
        int operand2 = operands.top();
        operands.pop();
        int operand1 = operands.top();
        operands.pop();
        operands.push(applyOperation(operand1, operand2, op));
    }

    return operands.top();
}

int evaluateRPN(const string& expression, int base) {
    stack<int> stack;
    stringstream ss(expression);
    string token;

    while (ss >> token) {
        if (token == "+" || token == "-" || token == "*" || token == "/") {
            int operand2 = stack.top();
            stack.pop();
            int operand1 = stack.top();
            stack.pop();
            int result;

            if (token == "+") {
                result = operand1 + operand2;
            } else if (token == "-") {
                result = operand1 - operand2;
            } else if (token == "*") {
                result = operand1 * operand2;
            } else if (token == "/") {
                result = operand1 / operand2;
            }

            stack.push(result);
        } else {
            if (!isValidNumber(token, base)) {
                return 0;
            }
            int number = convertToDecimal(token, base);
            stack.push(number);
        }
    }

    return stack.top();
}

int main() {
    int base;
    cout << "Введите систему счисления (от 2 до 16): ";
    cin >> base;

    if (base < 2 || base > 16) {
        cout << "Ошибка: система счисления должна быть от 2 до 16." << endl;
        return 1;
    }

    string expression;
    cout << "Введите выражение (обычное или в обратной польской нотации): ";
    cin.ignore(); 
    getline(cin, expression);

    int result;

    if (expression.find('+') != string::npos || expression.find('-') != string::npos || expression.find('*') != string::npos || expression.find('/') != string::npos) {
        result = evaluateExpression(expression, base);
    } else {
        result = evaluateRPN(expression, base);
    }

    if (result == 0) {
        cout << "Ошибка: некорректное число в выражении." << endl;
        return 1;
    }

    cout << "Результат в десятичной (10) системе: " << result << endl;
    cout << "Результат в системе счисления " << base << ": " << convertFromDecimal(result, base) << endl;
    cout << "Результат в двоичной (2) системе: " << convertFromDecimal(result, 2) << endl;
    cout << "Результат в восьмеричной (8) системе: " << convertFromDecimal(result, 8) << endl;
    cout << "Результат в шестнадцатеричной (16) системе: " << convertFromDecimal(result, 16) << endl;

    return 0;
}
