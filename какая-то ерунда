#include <clocale>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <iomanip>

using namespace std;

struct node {
    int data;
    node* left;
    node* right;
};

node* createNode(int data) {
    node* newNode = new node;
    newNode->data = data;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

void insertNode(node* root, int data) {
    if (data < root->data) {
        if (root->left != nullptr) {
            insertNode(root->left, data);
        } else {
            root->left = createNode(data);
        }
    } else {
        if (root->right != nullptr) {
            insertNode(root->right, data);
        } else {
            root->right = createNode(data);
        }
    }
}

void printTree(node* root, int level) {
    if (root == nullptr) {
        return;
    }

    printTree(root->right, level + 1);
    cout << setw(level * 4) << root->data << endl;
    printTree(root->left, level + 1);
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(0));

    int N;
    cout << "Введите количество чисел (N): ";
    cin >> N;

    int a;
    cout << "Выберите метод ввода (1 - ввод с клавиатуры, 0 - генерация случайным образом от 1 до N): ";
    cin >> a;

    node* root = nullptr;

    if (a == 0) {
        for (int i = 0; i < N; ++i) {
            int randomNum = rand() % N + 1;
            if (root == nullptr) {
                root = createNode(randomNum);
            } else {
                insertNode(root, randomNum);
            }
        }
    }

    if (a == 1) {
        vector<int> nums(N);
        cout << "Введите числа: ";
        for (int i = 0; i < N; ++i) {
            cin >> nums[i];
            if (root == nullptr) {
                root = createNode(nums[i]);
            } else {
                insertNode(root, nums[i]);
            }
        }
    }

    // Вывод дерева
    cout << "Бинарное дерево:\n";
    printTree(root, 0);

    return 0;
}
